// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpcserver.proto

package grpcserver

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type QueryRange int32

const (
	QueryRange_DAY   QueryRange = 0
	QueryRange_WEEK  QueryRange = 1
	QueryRange_MONTH QueryRange = 2
)

var QueryRange_name = map[int32]string{
	0: "DAY",
	1: "WEEK",
	2: "MONTH",
}

var QueryRange_value = map[string]int32{
	"DAY":   0,
	"WEEK":  1,
	"MONTH": 2,
}

func (x QueryRange) String() string {
	return proto.EnumName(QueryRange_name, int32(x))
}

func (QueryRange) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_afa6debe97205904, []int{0}
}

type Event struct {
	ID                   int64                `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title                string               `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Date                 *timestamp.Timestamp `protobuf:"bytes,3,opt,name=Date,proto3" json:"Date,omitempty"`
	Latency              *duration.Duration   `protobuf:"bytes,4,opt,name=Latency,proto3" json:"Latency,omitempty"`
	Note                 string               `protobuf:"bytes,5,opt,name=Note,proto3" json:"Note,omitempty"`
	UserID               int64                `protobuf:"varint,6,opt,name=UserID,proto3" json:"UserID,omitempty"`
	NotifyTime           *duration.Duration   `protobuf:"bytes,7,opt,name=NotifyTime,proto3" json:"NotifyTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_afa6debe97205904, []int{0}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Event) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Event) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *Event) GetLatency() *duration.Duration {
	if m != nil {
		return m.Latency
	}
	return nil
}

func (m *Event) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *Event) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *Event) GetNotifyTime() *duration.Duration {
	if m != nil {
		return m.NotifyTime
	}
	return nil
}

type EventList struct {
	Events               []*Event `protobuf:"bytes,1,rep,name=Events,proto3" json:"Events,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventList) Reset()         { *m = EventList{} }
func (m *EventList) String() string { return proto.CompactTextString(m) }
func (*EventList) ProtoMessage()    {}
func (*EventList) Descriptor() ([]byte, []int) {
	return fileDescriptor_afa6debe97205904, []int{1}
}

func (m *EventList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventList.Unmarshal(m, b)
}
func (m *EventList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventList.Marshal(b, m, deterministic)
}
func (m *EventList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventList.Merge(m, src)
}
func (m *EventList) XXX_Size() int {
	return xxx_messageInfo_EventList.Size(m)
}
func (m *EventList) XXX_DiscardUnknown() {
	xxx_messageInfo_EventList.DiscardUnknown(m)
}

var xxx_messageInfo_EventList proto.InternalMessageInfo

func (m *EventList) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type EventID struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventID) Reset()         { *m = EventID{} }
func (m *EventID) String() string { return proto.CompactTextString(m) }
func (*EventID) ProtoMessage()    {}
func (*EventID) Descriptor() ([]byte, []int) {
	return fileDescriptor_afa6debe97205904, []int{2}
}

func (m *EventID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventID.Unmarshal(m, b)
}
func (m *EventID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventID.Marshal(b, m, deterministic)
}
func (m *EventID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventID.Merge(m, src)
}
func (m *EventID) XXX_Size() int {
	return xxx_messageInfo_EventID.Size(m)
}
func (m *EventID) XXX_DiscardUnknown() {
	xxx_messageInfo_EventID.DiscardUnknown(m)
}

var xxx_messageInfo_EventID proto.InternalMessageInfo

func (m *EventID) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type EventWthID struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Event                *Event   `protobuf:"bytes,2,opt,name=Event,proto3" json:"Event,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventWthID) Reset()         { *m = EventWthID{} }
func (m *EventWthID) String() string { return proto.CompactTextString(m) }
func (*EventWthID) ProtoMessage()    {}
func (*EventWthID) Descriptor() ([]byte, []int) {
	return fileDescriptor_afa6debe97205904, []int{3}
}

func (m *EventWthID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventWthID.Unmarshal(m, b)
}
func (m *EventWthID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventWthID.Marshal(b, m, deterministic)
}
func (m *EventWthID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventWthID.Merge(m, src)
}
func (m *EventWthID) XXX_Size() int {
	return xxx_messageInfo_EventWthID.Size(m)
}
func (m *EventWthID) XXX_DiscardUnknown() {
	xxx_messageInfo_EventWthID.DiscardUnknown(m)
}

var xxx_messageInfo_EventWthID proto.InternalMessageInfo

func (m *EventWthID) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *EventWthID) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type Date struct {
	Date                 *timestamp.Timestamp `protobuf:"bytes,1,opt,name=Date,proto3" json:"Date,omitempty"`
	Range                QueryRange           `protobuf:"varint,2,opt,name=Range,proto3,enum=grpcserver.QueryRange" json:"Range,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Date) Reset()         { *m = Date{} }
func (m *Date) String() string { return proto.CompactTextString(m) }
func (*Date) ProtoMessage()    {}
func (*Date) Descriptor() ([]byte, []int) {
	return fileDescriptor_afa6debe97205904, []int{4}
}

func (m *Date) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Date.Unmarshal(m, b)
}
func (m *Date) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Date.Marshal(b, m, deterministic)
}
func (m *Date) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Date.Merge(m, src)
}
func (m *Date) XXX_Size() int {
	return xxx_messageInfo_Date.Size(m)
}
func (m *Date) XXX_DiscardUnknown() {
	xxx_messageInfo_Date.DiscardUnknown(m)
}

var xxx_messageInfo_Date proto.InternalMessageInfo

func (m *Date) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *Date) GetRange() QueryRange {
	if m != nil {
		return m.Range
	}
	return QueryRange_DAY
}

func init() {
	proto.RegisterEnum("grpcserver.QueryRange", QueryRange_name, QueryRange_value)
	proto.RegisterType((*Event)(nil), "grpcserver.Event")
	proto.RegisterType((*EventList)(nil), "grpcserver.EventList")
	proto.RegisterType((*EventID)(nil), "grpcserver.EventID")
	proto.RegisterType((*EventWthID)(nil), "grpcserver.EventWthID")
	proto.RegisterType((*Date)(nil), "grpcserver.Date")
}

func init() { proto.RegisterFile("grpcserver.proto", fileDescriptor_afa6debe97205904) }

var fileDescriptor_afa6debe97205904 = []byte{
	// 546 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdd, 0x8a, 0xd3, 0x5c,
	0x14, 0x9d, 0xb4, 0xf9, 0x99, 0xee, 0x7e, 0x5f, 0xcd, 0x6c, 0xb5, 0x66, 0xa2, 0x68, 0xc9, 0x8d,
	0xb5, 0x48, 0x02, 0x1d, 0x10, 0x14, 0xbc, 0x70, 0x3c, 0x41, 0xa3, 0x33, 0x15, 0x43, 0x87, 0x41,
	0xef, 0x32, 0xd3, 0x33, 0x35, 0xd0, 0x26, 0x21, 0x39, 0x1d, 0x28, 0xa5, 0x37, 0xbe, 0x82, 0x8f,
	0xe2, 0xa3, 0xf8, 0x0a, 0xbe, 0x84, 0x77, 0x92, 0x9d, 0xd4, 0x29, 0x4d, 0x8b, 0xde, 0x9d, 0xb3,
	0xd7, 0xda, 0x6b, 0xed, 0x9f, 0x93, 0x80, 0x3e, 0x4e, 0x93, 0xcb, 0x8c, 0xa7, 0xd7, 0x3c, 0xb5,
	0x93, 0x34, 0x16, 0x31, 0xc2, 0x4d, 0xc4, 0x7c, 0x34, 0x8e, 0xe3, 0xf1, 0x84, 0x3b, 0x84, 0x5c,
	0xcc, 0xae, 0x1c, 0x11, 0x4e, 0x79, 0x26, 0x82, 0x69, 0x52, 0x90, 0xcd, 0x87, 0x9b, 0x84, 0xd1,
	0x2c, 0x0d, 0x44, 0x18, 0x47, 0x25, 0x7e, 0x7f, 0x13, 0xe7, 0xd3, 0x44, 0xcc, 0x4b, 0xf0, 0x41,
	0x09, 0x06, 0x49, 0xe8, 0x04, 0x51, 0x14, 0x0b, 0xca, 0xcc, 0x0a, 0xd4, 0xfa, 0x25, 0x81, 0xe2,
	0x5e, 0xf3, 0x48, 0x60, 0x0b, 0x6a, 0x1e, 0x33, 0xa4, 0x8e, 0xd4, 0xad, 0xfb, 0x35, 0x8f, 0xe1,
	0x1d, 0x50, 0x86, 0xa1, 0x98, 0x70, 0xa3, 0xd6, 0x91, 0xba, 0x0d, 0xbf, 0xb8, 0xa0, 0x0d, 0x32,
	0x0b, 0x04, 0x37, 0xea, 0x1d, 0xa9, 0xdb, 0xec, 0x9b, 0x76, 0x21, 0x6e, 0xaf, 0x9c, 0xed, 0xe1,
	0xaa, 0x74, 0x9f, 0x78, 0x78, 0x04, 0xda, 0x49, 0x20, 0x78, 0x74, 0x39, 0x37, 0x64, 0x4a, 0x39,
	0xac, 0xa4, 0xb0, 0xb2, 0x19, 0x7f, 0xc5, 0x44, 0x04, 0x79, 0x10, 0x0b, 0x6e, 0x28, 0xe4, 0x4c,
	0x67, 0x6c, 0x83, 0x7a, 0x96, 0xf1, 0xd4, 0x63, 0x86, 0x4a, 0x25, 0x96, 0x37, 0x7c, 0x0e, 0x30,
	0x88, 0x45, 0x78, 0x35, 0xcf, 0x9d, 0x0d, 0xed, 0x6f, 0x1e, 0x6b, 0x64, 0xeb, 0x19, 0x34, 0xa8,
	0xf5, 0x93, 0x30, 0x13, 0xf8, 0x04, 0x54, 0xba, 0x64, 0x86, 0xd4, 0xa9, 0x77, 0x9b, 0xfd, 0x03,
	0x7b, 0x6d, 0x67, 0x84, 0xf8, 0x25, 0xc1, 0x3a, 0x04, 0x8d, 0x4e, 0x1e, 0xdb, 0x1c, 0x9a, 0xe5,
	0x02, 0x10, 0x74, 0x2e, 0xbe, 0x54, 0x51, 0x7c, 0x5c, 0xce, 0x9a, 0x46, 0xba, 0xd5, 0xa2, 0xc0,
	0xad, 0x51, 0x31, 0xe5, 0x3f, 0xd3, 0x96, 0xfe, 0x71, 0xda, 0x4f, 0x41, 0xf1, 0x83, 0x68, 0x5c,
	0xec, 0xac, 0xd5, 0x6f, 0xaf, 0x1b, 0x7c, 0x9c, 0xf1, 0x74, 0x4e, 0xa8, 0x5f, 0x90, 0x7a, 0x3d,
	0x80, 0x9b, 0x20, 0x6a, 0x50, 0x67, 0xaf, 0x3e, 0xe9, 0x7b, 0xb8, 0x0f, 0xf2, 0xb9, 0xeb, 0xbe,
	0xd7, 0x25, 0x6c, 0x80, 0x72, 0xfa, 0x61, 0x30, 0x7c, 0xab, 0xd7, 0xfa, 0xdf, 0xeb, 0x20, 0xe7,
	0x62, 0xf8, 0x12, 0xd4, 0xd7, 0x29, 0xcf, 0xcd, 0xaa, 0xe5, 0x9b, 0xb7, 0x2b, 0x21, 0x8f, 0x59,
	0xcd, 0xaf, 0x3f, 0x7e, 0x7e, 0xab, 0x29, 0xd6, 0xde, 0x0b, 0xa9, 0x87, 0xef, 0x40, 0x3d, 0x4b,
	0x46, 0x79, 0x7a, 0xbb, 0xc2, 0xa5, 0xa1, 0x99, 0xed, 0x4a, 0x97, 0x6e, 0xfe, 0x9a, 0x2d, 0x9d,
	0x64, 0xc0, 0x54, 0x9c, 0x85, 0xc7, 0x96, 0xb9, 0x16, 0x03, 0x95, 0xf1, 0x09, 0x17, 0x1c, 0xb7,
	0xf9, 0xee, 0x14, 0xfa, 0x9f, 0x84, 0xb4, 0x5e, 0x21, 0x84, 0x2e, 0xc8, 0xf4, 0x00, 0x76, 0xd0,
	0xcd, 0xbb, 0x15, 0xed, 0x9c, 0x6e, 0xb5, 0x48, 0x65, 0x1f, 0x55, 0x87, 0xd3, 0xe7, 0xc3, 0x40,
	0x7b, 0xc3, 0xc5, 0xf1, 0xdc, 0x63, 0xdb, 0xab, 0xd9, 0x21, 0x53, 0x16, 0x83, 0x65, 0x31, 0xa7,
	0xd0, 0x20, 0x15, 0xda, 0xa6, 0xbe, 0x9e, 0x92, 0x47, 0x76, 0x89, 0xdc, 0x23, 0x91, 0x03, 0xbc,
	0xe5, 0x2c, 0x72, 0xda, 0xd2, 0x59, 0xd0, 0x4a, 0x97, 0xc7, 0xff, 0x7d, 0x5e, 0xfb, 0xcf, 0x5c,
	0xa8, 0xd4, 0xd9, 0xd1, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x78, 0x0d, 0x16, 0xbf, 0x8e, 0x04,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GrpcClient is the client API for Grpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GrpcClient interface {
	Create(ctx context.Context, in *Event, opts ...grpc.CallOption) (*EventID, error)
	Update(ctx context.Context, in *EventWthID, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *EventID, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EventList, error)
	GetByID(ctx context.Context, in *EventID, opts ...grpc.CallOption) (*EventList, error)
	GetByDate(ctx context.Context, in *Date, opts ...grpc.CallOption) (*EventList, error)
}

type grpcClient struct {
	cc *grpc.ClientConn
}

func NewGrpcClient(cc *grpc.ClientConn) GrpcClient {
	return &grpcClient{cc}
}

func (c *grpcClient) Create(ctx context.Context, in *Event, opts ...grpc.CallOption) (*EventID, error) {
	out := new(EventID)
	err := c.cc.Invoke(ctx, "/grpcserver.grpc/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) Update(ctx context.Context, in *EventWthID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpcserver.grpc/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) Delete(ctx context.Context, in *EventID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpcserver.grpc/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EventList, error) {
	out := new(EventList)
	err := c.cc.Invoke(ctx, "/grpcserver.grpc/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetByID(ctx context.Context, in *EventID, opts ...grpc.CallOption) (*EventList, error) {
	out := new(EventList)
	err := c.cc.Invoke(ctx, "/grpcserver.grpc/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetByDate(ctx context.Context, in *Date, opts ...grpc.CallOption) (*EventList, error) {
	out := new(EventList)
	err := c.cc.Invoke(ctx, "/grpcserver.grpc/GetByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcServer is the server API for Grpc service.
type GrpcServer interface {
	Create(context.Context, *Event) (*EventID, error)
	Update(context.Context, *EventWthID) (*empty.Empty, error)
	Delete(context.Context, *EventID) (*empty.Empty, error)
	List(context.Context, *empty.Empty) (*EventList, error)
	GetByID(context.Context, *EventID) (*EventList, error)
	GetByDate(context.Context, *Date) (*EventList, error)
}

// UnimplementedGrpcServer can be embedded to have forward compatible implementations.
type UnimplementedGrpcServer struct {
}

func (*UnimplementedGrpcServer) Create(ctx context.Context, req *Event) (*EventID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedGrpcServer) Update(ctx context.Context, req *EventWthID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedGrpcServer) Delete(ctx context.Context, req *EventID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedGrpcServer) List(ctx context.Context, req *empty.Empty) (*EventList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedGrpcServer) GetByID(ctx context.Context, req *EventID) (*EventList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (*UnimplementedGrpcServer) GetByDate(ctx context.Context, req *Date) (*EventList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByDate not implemented")
}

func RegisterGrpcServer(s *grpc.Server, srv GrpcServer) {
	s.RegisterService(&_Grpc_serviceDesc, srv)
}

func _Grpc_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.grpc/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).Create(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventWthID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.grpc/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).Update(ctx, req.(*EventWthID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.grpc/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).Delete(ctx, req.(*EventID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.grpc/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).List(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.grpc/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).GetByID(ctx, req.(*EventID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Date)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).GetByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.grpc/GetByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).GetByDate(ctx, req.(*Date))
	}
	return interceptor(ctx, in, info, handler)
}

var _Grpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcserver.grpc",
	HandlerType: (*GrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Grpc_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Grpc_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Grpc_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Grpc_List_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _Grpc_GetByID_Handler,
		},
		{
			MethodName: "GetByDate",
			Handler:    _Grpc_GetByDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcserver.proto",
}
